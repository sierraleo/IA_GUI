import tkinter as tk
from tkinter import ttk
import tkinter.scrolledtext as st
from tkinter import filedialog
import csv

root = tk.Tk()
root.title("Client Tracking Program")
root.geometry("800x730")  # Width x Height
root.configure(background='gray70')
tabControl = ttk.Notebook(root)

# start at 0 and need to +1 everytime "Save client" is pressed and -1 when "Delete client" pressed
# create new CSV, Function that reads file and line numbers, if file is blank make number of clients = 1
# numberOfClients will always be number of clients in CSV +1, so the array always has 1 more than the amount of clients

'''
def readCSV():
    # Opening file
    input_string = ""
    file1 = open('clientData.csv')
    counter = -1  # -1 so that when entering for loop, counter starts at 0
    # for line in file1:
        # input_string += line
        # counter += 1  # counts up to iterate through columns
        # line = line.split(',')
        # size = len(line)
        # for i in range(size):
            # arr[counter][i] = line[i]
            # print(line[i])
'''

def csvLength():
    global lineCounter
    csvFile = open('clientData.csv')
    reader = csv.reader(csvFile)  # reading the csv file
    lineCounter = len(list(reader))  # getting the line count of lines in csv file
    if lineCounter == 0:
        lineCounter = 1
    if lineCounter >0:
        lineCounter += 1
    arrayBuilder()
    print(lineCounter)



def arrayBuilder():  # building a 2D array
    global arr, rows, cols
    rows, cols = (lineCounter, 13)  # defining size of the array, hard coded in as of now
    arr = [["" for i in range(cols)] for j in range(rows)]  # building the array out
    return arr, rows, cols

csvLength()
arrayBuilder()

# global arr

# Creating tabs in the GUI
tab1 = ttk.Frame(tabControl)
tab2 = ttk.Frame(tabControl)
tab3 = ttk.Frame(tabControl)
tabControl.add(tab1, text='Client Information')
tabControl.add(tab2, text='Add Client')
tabControl.add(tab3, text='Export Data as CSV')
tabControl.pack(expand=1, fill="both")

global newName, newPhoneNumber, newEmail, newHomeAddress, newBirthday, newSpouseName, newChildrenName, newPetName, \
    newBusinessType, newDateInteraction, newReferrals, newHouseDate, newNotes

def writeLinesToFile():
    # Table.getData(root)
    # testString = ("idsbibdsic", "another", "test")
    # need another for loop with the .get to save
    print(arr)
    fileToSaveTo = open('clientData.csv', "w")
    for i in range(rows):
        for j in range(cols):
            if j < cols - 1:
                fileToSaveTo.write(arr[i][j] + ",")
            else:
                fileToSaveTo.write(arr[i][j])
    fileToSaveTo.close()

# arrayBuilder()
def saveClient():
    # saving the values entered into the entry boxes into a 2D array
    # once saved, need to clear the boxes and fill the next item in the array
    arr_length = len(arr) -2
    newName = newClientName.get()
    arr[arr_length][0] = newName
    newPhoneNumber = newClientPhone_Num.get()
    arr[arr_length][1] = newPhoneNumber
    newEmail = newClientEmail.get()
    arr[0][2] = newEmail
    newHomeAddress = newClientHome_Address.get()
    arr[0][3] = newHomeAddress
    newBirthday = newClientBirthday.get()
    arr[0][4] = newBirthday
    newSpouseName = newClientSpouse_Name.get()
    arr[0][5] = newSpouseName
    newChildrenName = newClientChildren_Name.get()
    arr[0][6] = newChildrenName
    newPetName = newClientPet_Name.get()
    arr[0][7] = newPetName
    newBusinessType = newCLientBusinessType.get()
    arr[0][8] = newBusinessType
    newDateInteraction = newClientDateOfInteraction.get()
    arr[0][9] = newDateInteraction
    newReferrals = newClientReferral.get()
    arr[0][10] = newReferrals
    newHouseDate = newDateHousePurchase.get()
    arr[0][11] = newHouseDate
    # saving notes to the array
    newNotes = newClientNotes.get("1.0", tk.END)
    fl = open("output.txt", "w")
    fl.write(newNotes)
    arr[0][12] = newNotes
    dropDownBox()
    print(arr)
    writeLinesToFile()
    # arrayBuilder()

    #index_POS = arr.index("test name")
    #print(index_POS)
    #clientInfo()


# Add Client: creating the labels and entry boxes for each data type
ttk.Label(tab2, text="Client Name:").grid(column=0, row=0, padx=10, pady=10)
newClientName = ttk.Entry(tab2)
newClientName.grid(column=1, row=0, padx=5, pady=5)

ttk.Label(tab2,text="Client Phone Number:").grid(column=0, row=1, padx=10, pady=10)
newClientPhone_Num = ttk.Entry(tab2)
newClientPhone_Num.grid(column=1, row=1, padx=5, pady=5)

ttk.Label(tab2,text="Client Email:").grid(column=0, row=2, padx=5, pady=5)
newClientEmail = ttk.Entry(tab2)
newClientEmail.grid(column=1, row=2, padx=5, pady=5)

ttk.Label(tab2, text="Client Home Address:").grid(column=0, row=3, padx=5, pady=5)
newClientHome_Address = ttk.Entry(tab2)
newClientHome_Address.grid(column=1, row=3, padx=5, pady=5)

ttk.Label(tab2, text="Client Birthday:").grid(column=0, row=4, padx=5, pady=5)
newClientBirthday = ttk.Entry(tab2)
newClientBirthday.grid(column=1, row=4, padx=5, pady=5)

ttk.Label(tab2, text="Spouse Name:").grid(column=0, row=5, padx=5, pady=5)
newClientSpouse_Name = ttk.Entry(tab2)
newClientSpouse_Name.grid(column=1, row=5, padx=5, pady=5)

ttk.Label(tab2, text="Child(ren) Name(s):").grid(column=0, row=6, padx=5, pady=5)
newClientChildren_Name = ttk.Entry(tab2)  # need to separate somehow
newClientChildren_Name.grid(column=1, row=6, padx=5, pady=5)

ttk.Label(tab2, text="Pet Name(s):").grid(column=0, row=7, padx=5, pady=5)
newClientPet_Name = ttk.Entry(tab2)  # need to separate somehow
newClientPet_Name.grid(column=1, row=7, padx=5, pady=5)

ttk.Label(tab2, text="Business Type:").grid(column=0, row=8, padx=5, pady=5)
newCLientBusinessType = ttk.Entry(tab2)
newCLientBusinessType.grid(column=1, row=8, padx=5, pady=5)

ttk.Label(tab2, text="Date of Late Interaction:").grid(column=0, row=9, padx=5, pady=5)
newClientDateOfInteraction = ttk.Entry(tab2)
newClientDateOfInteraction.grid(column=1, row=9, padx=5, pady=5)

ttk.Label(tab2, text="Referrals:").grid(column=0, row=10, padx=5, pady=5)
newClientReferral = ttk.Entry(tab2)
newClientReferral.grid(column=1, row=10, padx=5, pady=5)

ttk.Label(tab2, text="Date of House Purchase:").grid(column=0, row=11, padx=5, pady=5)
newDateHousePurchase = ttk.Entry(tab2)
newDateHousePurchase.grid(column=1, row=11, padx=5, pady=5)

ttk.Label(tab2, text="Notes:").grid(column=0, row=12, padx=5, pady=5)
newClientNotes = st.ScrolledText(tab2, width=30, height=5, font=("Times New Roman", 15))
newClientNotes.grid(column=1, row=12, padx=5, pady=5)
ttk.Button(tab2, text='Save Client', command=saveClient).grid(column=0, row=13, padx=5, pady=10)

# arrayBuilder()
def dropDownBox():
    ttk.Label(tab1, text="Client Information: Select a Client").grid(column=0, row=0, padx=5, pady=5)

    OPTIONS = [item[0] for item in arr]  # printing first item in element of arr (client name)
    # need to add more when more clients are created
    # when one of these is selected, the main page needs to fill in with info

    variable = tk.StringVar(tab1)
    variable.set(OPTIONS[0])  # default value
    w = tk.OptionMenu(tab1, variable, *OPTIONS)
    w.grid(column=0, row=1)


# Main Page
ttk.Label(tab1, text="Client Name:").grid(column=0, row=2, padx=10, pady=10)
clientName = ttk.Entry(tab1)
clientName.grid(column=1, row=2, padx=5, pady=5)
# clientName.insert(0, arr[0][0])  # need to insert the client name var

ttk.Label(tab1, text="Client Phone Number:").grid(column=0, row=3, padx=10, pady=10)
clientPhone_Num = ttk.Entry(tab1)
clientPhone_Num.grid(column=1, row=3, padx=5, pady=5)


ttk.Label(tab1, text="Client Email:").grid(column=0, row=4, padx=5, pady=5)
clientEmail = ttk.Entry(tab1)
clientEmail.grid(column=1, row=4, padx=5, pady=5)

ttk.Label(tab1, text="Client Home Address:").grid(column=0, row=5, padx=5, pady=5)
clientHome_Address = ttk.Entry(tab1)
clientHome_Address.grid(column=1, row=5, padx=5, pady=5)

ttk.Label(tab1, text="Client Birthday:").grid(column=0, row=6, padx=5, pady=5)
clientBirthday = ttk.Entry(tab1)
clientBirthday.grid(column=1, row=6, padx=5, pady=5)

ttk.Label(tab1, text="Spouse Name:").grid(column=0, row=7, padx=5, pady=5)
clientSpouse_Name = ttk.Entry(tab1)
clientSpouse_Name.grid(column=1, row=7, padx=5, pady=5)

ttk.Label(tab1, text="Child(ren) Name(s):").grid(column=0, row=8, padx=5, pady=5)
clientChildren_Name = ttk.Entry(tab1)  # need to separate somehow
clientChildren_Name.grid(column=1, row=8, padx=5, pady=5)

ttk.Label(tab1, text="Pet Name(s):").grid(column=0, row=9, padx=5, pady=5)
clientPet_Name = ttk.Entry(tab1)  # need to separate somehow
clientPet_Name.grid(column=1, row=9, padx=5, pady=5)

ttk.Label(tab1, text="Business Type:").grid(column=0, row=10, padx=5, pady=5)
entryBox = ttk.Entry(tab1)
entryBox.grid(column=1, row=10, padx=5, pady=5)

ttk.Label(tab1, text="Date of Late Interaction:").grid(column=0, row=11, padx=5, pady=5)
entryBox = ttk.Entry(tab1)
entryBox.grid(column=1, row=11, padx=5, pady=5)

ttk.Label(tab1, text="Referrals:").grid(column=0, row=12, padx=5, pady=5)
clientReferral = ttk.Entry(tab1)
clientReferral.grid(column=1, row=12, padx=5, pady=5)

ttk.Label(tab1, text="Date of House Purchase:").grid(column=0, row=13, padx=5, pady=5)
entryBox = ttk.Entry(tab1)
entryBox.grid(column=1, row=13, padx=5, pady=5)

ttk.Label(tab1, text="Notes:").grid(column=0, row=14, padx=5, pady=5)
clientNotes = st.ScrolledText(tab1, width=30, height=5, font=("Times New Roman", 15))
clientNotes.grid(column=1, row=14, padx=5, pady=5)
dropDownBox()
def saveEdits():
    name = clientName.get()
    arr[0][0] = name
    phoneNumber = clientPhone_Num.get()
    arr[0][1] = phoneNumber
    email = clientEmail.get()
    arr[0][2] = email
    homeAddress = clientHome_Address.get()
    arr[0][3] = homeAddress
    birthday = clientBirthday.get()
    arr[0][4] = birthday
    spouseName = clientSpouse_Name.get()
    arr[0][5] = spouseName
    childrenName = clientChildren_Name.get()
    arr[0][6] = childrenName
    petName = clientPet_Name.get()
    arr[0][7] = petName
    referrals = clientReferral.get()
    arr[0][10] = referrals
    # saving notes to the array
    notes = clientNotes.get("1.0", tk.END)
    fl = open("output.txt", "w")
    fl.write(notes)
    arr[0][12] = notes
    print(arr)
#def clientInfo():
    #listbox = tk.Listbox(tab1, width=60, height=20)  # creating a box to display client info
    #listbox.grid(column=5, row=5, padx=5, pady=5)
    # need to format the output
    # need to make array editable
    #for item in [arr]:
        #listbox.insert(tk.END, item)  # inserting the client array into the listbox


#clientInfo()
ttk.Button(tab1, text='Delete Client').grid(column=1, row=1, padx=10, pady=10)  # maybe have popup window to confirm
ttk.Button(tab1, text='Save Edits', command=saveEdits).grid(column=1, row=15, padx=10, pady=10)


def viewData():  # don't need
    listbox = tk.Listbox(tab3, width=60, height=20)  # creating a box to display client info
    listbox.grid(column=7, row=5, padx=5, pady=5)

    for item in [arr]:
        listbox.insert(tk.END, item)  # inserting the client array into the listbox



def exportCSV():
    root.clientCSV = filedialog.asksaveasfilename(initialdir="read_text/", title="Select file", filetypes=(
    ("csv files", "*.csv"), ("txt files", "*.txt"), ("all files", "*.*")))
    print("saving file to " + root.clientCSV)
    #print(arr)
    fileToSaveTo = open(root.clientCSV, "w")
    for i in range(rows):
        for j in range(cols):
            if j < cols - 1:
                fileToSaveTo.write(arr[i][j] + ",")
            else:
                fileToSaveTo.write(arr[i][j])
    fileToSaveTo.close()

# Export Client Data CSV
# ttk.Button(tab3, text='View Data to Export', command=viewData).grid(column=5,row=3,padx=5,pady=5)
ttk.Button(tab3, text='Confirm Export', command=exportCSV).grid(column=5,row=5,padx=5,pady=5)  # put on tab1

root.mainloop()
