import tkinter as tk
from tkinter import ttk
import tkinter.scrolledtext as st
from tkinter import filedialog
import csv


root = tk.Tk()
root.title("Client Tracking Program")
root.geometry("800x730")  # Width x Height
root.configure(background='gray70')
tabControl = ttk.Notebook(root)

# start at 0 and need to +1 everytime "Save client" is pressed and -1 when "Delete client" pressed
# create new CSV, Function that reads file and line numbers, if file is blank make number of clients = 1
# numberOfClients will always be number of clients in CSV +1, so the array always has 1 more than the amount of clients


def readCSV():
    # Opening file
    global arr
    input_string = ""
    file1 = open('clientData.csv')
    counter = -1  # -1 so that when entering for loop, counter starts at 0
    for line in file1:
        input_string += line
        counter += 1  # counts up to iterate through columns
        line = line.replace("\n", "")  # .replace, need to delete \n when reading into array
        line = line.split(',')  # need to fix the way that the CSV is read when user inputs multiple data pieces
        size = len(line)        # separated by commas in one item of the array element
        for i in range(size):
            arr[counter][i] = line[i]
            # print(line[i])


def csvLength():
    global lineCounter
    csvFile = open('clientData.csv')
    reader = csv.reader(csvFile)  # reading the csv file
    lineCounter = len(list(reader))  # getting the line count of lines in csv file
    if lineCounter == 0:
        lineCounter = 1
        arrayBuilder()
    if lineCounter >0:
        arrayBuilder()
        readCSV()
    print(lineCounter)


def arrayBuilder():  # building a 2D array
    global arr, rows, cols
    rows, cols = (lineCounter, 13)  # defining size of the array, hard coded in as of now
    arr = [["" for i in range(cols)] for j in range(rows)]  # building the array out
    return arr, rows, cols


csvLength()

# global arr

# Creating tabs in the GUI
tab1 = ttk.Frame(tabControl)
tab2 = ttk.Frame(tabControl)
tab3 = ttk.Frame(tabControl)
tabControl.add(tab1, text='Client Information')
tabControl.add(tab2, text='Add Client')
tabControl.add(tab3, text='Export Data as CSV')
tabControl.pack(expand=1, fill="both")

global newName, newPhoneNumber, newEmail, newHomeAddress, newBirthday, newSpouseName, newChildrenName, newPetName, \
    newBusinessType, newDateInteraction, newReferrals, newHouseDate, newNotes

def writeLinesToFile():
    # Table.getData(root)
    # testString = ("idsbibdsic", "another", "test")
    # need another for loop with the .get to save
    # print(arr)
    fileToSaveTo = open('clientData.csv', "w")
    for i in range(rows):
        for j in range(cols):
            if j < cols - 1:
                fileToSaveTo.write(arr[i][j] + ",")
                # fileToSaveTo.write(arr[i][j])
            else:
                fileToSaveTo.write(arr[i][j] + "\n")
                # fileToSaveTo.write(arr[i][j])
    fileToSaveTo.close()

# arrayBuilder()
def saveClient():
    # saving the values entered into the entry boxes into a 2D array
    csvLength()
    readCSV()
    arr_length = len(arr) -1
    newName = newClientName.get()
    arr[arr_length][0] = newName
    newPhoneNumber = newClientPhone_Num.get()
    arr[arr_length][1] = newPhoneNumber
    newEmail = newClientEmail.get()
    arr[arr_length][2] = newEmail
    newHomeAddress = newClientHome_Address.get()
    arr[arr_length][3] = newHomeAddress
    newBirthday = newClientBirthday.get()
    arr[arr_length][4] = newBirthday
    newSpouseName = newClientSpouse_Name.get()
    arr[arr_length][5] = newSpouseName
    newChildrenName = newClientChildren_Name.get()
    arr[arr_length][6] = newChildrenName
    newPetName = newClientPet_Name.get()
    arr[arr_length][7] = newPetName
    newBusinessType = newClientBusinessType.get()
    arr[arr_length][8] = newBusinessType
    newDateInteraction = newClientDateOfInteraction.get()
    arr[arr_length][9] = newDateInteraction
    newReferrals = newClientReferral.get()
    arr[arr_length][10] = newReferrals
    newHouseDate = newDateHousePurchase.get()
    arr[arr_length][11] = newHouseDate
    # saving notes to the array
    newNotes = newClientNotes.get("1.0", tk.END)
    fl = open("output.txt", "w")
    fl.write(newNotes)
    arr[arr_length][12] = newNotes
    dropDownBox()
    print(arr)
    writeLinesToFile()


# Add Client: creating the labels and entry boxes for each data type
ttk.Label(tab2, text="Client Name:").grid(column=0, row=0, padx=10, pady=10)
newClientName = ttk.Entry(tab2)
newClientName.grid(column=1, row=0, padx=5, pady=5)

ttk.Label(tab2,text="Client Phone Number:").grid(column=0, row=1, padx=10, pady=10)
newClientPhone_Num = ttk.Entry(tab2)
newClientPhone_Num.grid(column=1, row=1, padx=5, pady=5)

ttk.Label(tab2,text="Client Email:").grid(column=0, row=2, padx=5, pady=5)
newClientEmail = ttk.Entry(tab2)
newClientEmail.grid(column=1, row=2, padx=5, pady=5)

ttk.Label(tab2, text="Client Home Address:").grid(column=0, row=3, padx=5, pady=5)
newClientHome_Address = ttk.Entry(tab2)
newClientHome_Address.grid(column=1, row=3, padx=5, pady=5)

ttk.Label(tab2, text="Client Birthday:").grid(column=0, row=4, padx=5, pady=5)
newClientBirthday = ttk.Entry(tab2)
newClientBirthday.grid(column=1, row=4, padx=5, pady=5)

ttk.Label(tab2, text="Spouse Name:").grid(column=0, row=5, padx=5, pady=5)
newClientSpouse_Name = ttk.Entry(tab2)
newClientSpouse_Name.grid(column=1, row=5, padx=5, pady=5)

ttk.Label(tab2, text="Child(ren) Name(s):").grid(column=0, row=6, padx=5, pady=5)
newClientChildren_Name = ttk.Entry(tab2)  # need to separate somehow
newClientChildren_Name.grid(column=1, row=6, padx=5, pady=5)

ttk.Label(tab2, text="Pet Name(s):").grid(column=0, row=7, padx=5, pady=5)
newClientPet_Name = ttk.Entry(tab2)  # need to separate somehow
newClientPet_Name.grid(column=1, row=7, padx=5, pady=5)

ttk.Label(tab2, text="Business Type:").grid(column=0, row=8, padx=5, pady=5)
newClientBusinessType = ttk.Entry(tab2)
newClientBusinessType.grid(column=1, row=8, padx=5, pady=5)

ttk.Label(tab2, text="Date of Late Interaction:").grid(column=0, row=9, padx=5, pady=5)
newClientDateOfInteraction = ttk.Entry(tab2)
newClientDateOfInteraction.grid(column=1, row=9, padx=5, pady=5)

ttk.Label(tab2, text="Referrals:").grid(column=0, row=10, padx=5, pady=5)
newClientReferral = ttk.Entry(tab2)
newClientReferral.grid(column=1, row=10, padx=5, pady=5)

ttk.Label(tab2, text="Date of House Purchase:").grid(column=0, row=11, padx=5, pady=5)
newDateHousePurchase = ttk.Entry(tab2)
newDateHousePurchase.grid(column=1, row=11, padx=5, pady=5)

ttk.Label(tab2, text="Notes:").grid(column=0, row=12, padx=5, pady=5)
newClientNotes = st.ScrolledText(tab2, width=30, height=5, font=("Times New Roman", 15))
newClientNotes.grid(column=1, row=12, padx=5, pady=5)
ttk.Button(tab2, text='Save Client', command=saveClient).grid(column=0, row=13, padx=5, pady=10)

# arrayBuilder()
def dropDownBox():
    ttk.Label(tab1, text="Client Information: Select a Client").grid(column=0, row=0, padx=5, pady=5)
    '''tempArray = arr
    tempArray = tempArray[:-1]
    print(tempArray)'''
    global OPTIONS
    OPTIONS = [item[0] for item in arr]  # printing first item in element of arr (client name)
    # when one of these is selected, the main page needs to fill in with info
    print(OPTIONS)
    global variable
    variable = tk.StringVar(tab1)
    variable.set(OPTIONS[0])  # default value
    w = tk.OptionMenu(tab1, variable, *OPTIONS)
    print(variable.get() + "197")
    w.grid(column=0, row=1)

def loadClient():
    print(variable.get())
    name = variable.get()
    index = OPTIONS.index(name)
    print(index)
    return index


# Main Page
ttk.Label(tab1, text="Client Name:").grid(column=0, row=2, padx=10, pady=10)
clientName = ttk.Entry(tab1)
clientName.grid(column=1, row=2, padx=5, pady=5)

ttk.Label(tab1, text="Client Phone Number:").grid(column=0, row=3, padx=10, pady=10)
clientPhone_Num = ttk.Entry(tab1)
clientPhone_Num.grid(column=1, row=3, padx=5, pady=5)

ttk.Label(tab1, text="Client Email:").grid(column=0, row=4, padx=5, pady=5)
clientEmail = ttk.Entry(tab1)
clientEmail.grid(column=1, row=4, padx=5, pady=5)

ttk.Label(tab1, text="Client Home Address:").grid(column=0, row=5, padx=5, pady=5)
clientHome_Address = ttk.Entry(tab1)
clientHome_Address.grid(column=1, row=5, padx=5, pady=5)

ttk.Label(tab1, text="Client Birthday:").grid(column=0, row=6, padx=5, pady=5)
clientBirthday = ttk.Entry(tab1)
clientBirthday.grid(column=1, row=6, padx=5, pady=5)

ttk.Label(tab1, text="Spouse Name:").grid(column=0, row=7, padx=5, pady=5)
clientSpouse_Name = ttk.Entry(tab1)
clientSpouse_Name.grid(column=1, row=7, padx=5, pady=5)

ttk.Label(tab1, text="Child(ren) Name(s):").grid(column=0, row=8, padx=5, pady=5)
clientChildren_Name = ttk.Entry(tab1)  # need to separate somehow
clientChildren_Name.grid(column=1, row=8, padx=5, pady=5)

ttk.Label(tab1, text="Pet Name(s):").grid(column=0, row=9, padx=5, pady=5)
clientPet_Name = ttk.Entry(tab1)  # need to separate somehow
clientPet_Name.grid(column=1, row=9, padx=5, pady=5)

ttk.Label(tab1, text="Business Type:").grid(column=0, row=10, padx=5, pady=5)
clientBusiness_Type = ttk.Entry(tab1)
clientBusiness_Type.grid(column=1, row=10, padx=5, pady=5)

ttk.Label(tab1, text="Date of Late Interaction:").grid(column=0, row=11, padx=5, pady=5)
clientDate_Of_Interaction = ttk.Entry(tab1)
clientDate_Of_Interaction.grid(column=1, row=11, padx=5, pady=5)

ttk.Label(tab1, text="Referrals:").grid(column=0, row=12, padx=5, pady=5)
clientReferral = ttk.Entry(tab1)
clientReferral.grid(column=1, row=12, padx=5, pady=5)

ttk.Label(tab1, text="Date of House Purchase:").grid(column=0, row=13, padx=5, pady=5)
clientDate_Of_HousePurchase = ttk.Entry(tab1)
clientDate_Of_HousePurchase.grid(column=1, row=13, padx=5, pady=5)

ttk.Label(tab1, text="Notes:").grid(column=0, row=14, padx=5, pady=5)
clientNotes = st.ScrolledText(tab1, width=30, height=5, font=("Times New Roman", 15))
clientNotes.grid(column=1, row=14, padx=5, pady=5)
dropDownBox()

def populateEntryBoxes():
    indexNumber = loadClient()
    clientName.delete(first=0,last=500)
    clientName.insert(0, arr[indexNumber][0])

    clientPhone_Num.delete(first=0,last=500)
    clientPhone_Num.insert(0, arr[indexNumber][1])

    clientEmail.delete(first=0,last=500)
    clientEmail.insert(0, arr[indexNumber][2])

    clientHome_Address.delete(first=0,last=500)
    clientHome_Address.insert(0, arr[indexNumber][3])

    clientBirthday.delete(first=0,last=500)
    clientBirthday.insert(0, arr[indexNumber][4])

    clientSpouse_Name.delete(first=0,last=500)
    clientSpouse_Name.insert(0, arr[indexNumber][5])

    clientChildren_Name.delete(first=0,last=500)
    clientChildren_Name.insert(0, arr[indexNumber][6])

    clientPet_Name.delete(first=0,last=500)
    clientPet_Name.insert(0, arr[indexNumber][7])

    clientBusiness_Type.delete(first=0,last=500)
    clientBusiness_Type.insert(0, arr[indexNumber][8])

    clientDate_Of_Interaction.delete(first=0,last=500)
    clientDate_Of_Interaction.insert(0, arr[indexNumber][9])

    clientReferral.delete(first=0,last=500)
    clientReferral.insert(0, arr[indexNumber][10])

    clientDate_Of_HousePurchase.delete(first=0,last=500)
    clientDate_Of_HousePurchase.insert(0, arr[indexNumber][11])

    clientNotes.delete("1.0",tk.END)
    insertNotes = arr[indexNumber][12]
    clientNotes.insert(tk.INSERT, insertNotes)


button = ttk.Button(tab1, text="Load Client", command=populateEntryBoxes)
button.grid(column=5, row=1)


def saveEdits():  # fix this
    # don't know how to find and save to specific items in the array
    newName = newClientName.get()
    arr[0][0] = newName
    writeLinesToFile()
    
    '''#csvLength()
    readCSV()
    #arr_length = len(arr)
    newName = newClientName.get()
    arr[][0] = newName
    newPhoneNumber = newClientPhone_Num.get()
    arr[0][1] = newPhoneNumber
    newEmail = newClientEmail.get()
    arr[][2] = newEmail
    newHomeAddress = newClientHome_Address.get()
    arr[][3] = newHomeAddress
    newBirthday = newClientBirthday.get()
    arr[][4] = newBirthday
    newSpouseName = newClientSpouse_Name.get()
    arr[][5] = newSpouseName
    newChildrenName = newClientChildren_Name.get()
    arr[][6] = newChildrenName
    newPetName = newClientPet_Name.get()
    arr[][7] = newPetName
    newBusinessType = newClientBusinessType.get()
    arr[][8] = newBusinessType
    newDateInteraction = newClientDateOfInteraction.get()
    arr[][9] = newDateInteraction
    newReferrals = newClientReferral.get()
    arr[][10] = newReferrals
    newHouseDate = newDateHousePurchase.get()
    arr[][11] = newHouseDate
    # saving notes to the array
    newNotes = newClientNotes.get("1.0", tk.END)
    fl = open("output.txt", "w")
    fl.write(newNotes)
    arr[][12] = newNotes
    # dropDownBox()
    print(arr)
    # writeLinesToFile()'''


entryText_var = tk.StringVar()

def deleteClient():
    # tryin to delete client values or entire client element in array
    newName1 = newClientName.get()
    #newClientName.delete(first=0, last=None)
    #populateEntryBoxes()
    #newArr = arr.delete(index)
    newArr = arr.delete(newName1)
    print(newArr)


#clientInfo()
ttk.Button(tab1, text='Delete Client').grid(column=1, row=1, padx=10, pady=10)  # maybe have popup window to confirm
ttk.Button(tab1, text='Save Edits', command=saveEdits).grid(column=1, row=15, padx=10, pady=10)


def exportCSV():
    # need to format output
    root.clientCSV = filedialog.asksaveasfilename(initialdir="read_text/", title="Select file", filetypes=(
    ("csv files", "*.csv"), ("txt files", "*.txt"), ("all files", "*.*")))
    print("saving file to " + root.clientCSV)
    #print(arr)
    fileToSaveTo = open(root.clientCSV, "w")
    for i in range(rows):
        for j in range(cols):
            if j < cols - 1:
                fileToSaveTo.write(arr[i][j] + ",")
            else:
                fileToSaveTo.write(arr[i][j])
    fileToSaveTo.close()

# Export Client Data CSV
# ttk.Button(tab3, text='View Data to Export', command=viewData).grid(column=5,row=3,padx=5,pady=5)
ttk.Button(tab3, text='Confirm Export', command=exportCSV).grid(column=5,row=5,padx=5,pady=5)  # put on tab1

populateEntryBoxes()
root.mainloop()
